version: '3.8'

services:
  # nginx:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.frontend
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - ./frontend/data:/usr/data
  #   networks:
  #     - my_network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    volumes:
      - rabbitmq_data:/usr/data
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - my_network

  db:
    container_name: db
    image: postgres:latest
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db_data:/var/lib/postgresql/data
    networks:
      - my_network

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports: 
      - "5000:5000"
    depends_on:
      - rabbitmq
      - db
    volumes:
      - backend_data:/usr/data
    networks:
      - my_network

  servicedb:
    container_name: servicedb
    build:
      context: ./servicedb
      dockerfile: Dockerfile.service
    depends_on:
      - rabbitmq
      - db
    volumes:
      - servicedb_data:/usr/data
    networks:
      - my_network


networks:
  my_network:
    driver: bridge

volumes:
  rabbitmq_data:
  db_data:
  backend_data:
  servicedb_data:
